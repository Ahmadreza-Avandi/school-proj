# راهنمای جامع دیپلوی پروژه سیستم حضور و غیاب روی VPS با SSL

## مرحله ۱: پیش‌نیازها
```bash
# اطمینان از نصب Docker و Docker Compose روی سرور
ssh root@your_server_ip

# نصب Docker (اگر نصب نیست)
curl -fsSL https://get.docker.com -o get-docker.sh
sh get-docker.sh

# نصب Docker Compose (اگر نصب نیست)
curl -L "https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose

# بررسی نسخه‌های نصب شده
docker --version
docker-compose --version
```

## مرحله ۲: پاکسازی نصب قبلی (اگر وجود دارد)
```bash
# توقف و حذف کانتینرهای قبلی
cd /path/to/project
docker-compose down
docker system prune -a --volumes --force
```

## مرحله ۳: دریافت کد پروژه
```bash
# کلون کردن مخزن 
git clone https://github.com/yourrepo/yourproject.git
cd yourproject

# یا انتقال فایل‌ها با استفاده از SCP/SFTP
scp -r /local/path/to/project root@your_server_ip:/path/on/server
```

## مرحله ۴: تنظیم گواهی‌نامه SSL
```bash
# روش اول: استفاده از Let's Encrypt (رایگان)
sudo apt update
sudo apt install certbot

# اطمینان از اینکه پورت‌های 80 و 443 آزاد هستند (کانتینرها را متوقف کنید)
docker-compose down

# دریافت گواهی SSL
sudo certbot certonly --standalone -d yourdomain.com -d www.yourdomain.com

# ساخت پوشه برای گواهی‌نامه‌ها
mkdir -p certs

# کپی گواهی‌نامه‌ها به پوشه پروژه
sudo cp /etc/letsencrypt/live/yourdomain.com/fullchain.pem certs/
sudo cp /etc/letsencrypt/live/yourdomain.com/privkey.pem certs/
sudo chmod 644 certs/*.pem

# روش دوم: استفاده از گواهی‌نامه‌های موجود
mkdir -p certs
cp /path/to/your/ssl/fullchain.pem certs/
cp /path/to/your/ssl/privkey.pem certs/
chmod 644 certs/*.pem
```

## مرحله ۵: اصلاح فایل docker-compose.yml برای پشتیبانی از SSL
```bash
# ایجاد یک کپی پشتیبان از فایل docker-compose.yml
cp docker-compose.yml docker-compose.yml.bak

# ویرایش docker-compose.yml برای پشتیبانی از SSL
nano docker-compose.yml
```

اصلاحات زیر را در فایل docker-compose.yml اعمال کنید:

```yaml
# سرویس nextjs را به صورت زیر ویرایش کنید
nextjs:
  build:
    context: ./next
    dockerfile: Dockerfile
  ports:
    - "443:3000"  # اضافه کردن پورت HTTPS
    - "80:80"     # برای ریدایرکت HTTP به HTTPS
  environment:
    - NODE_ENV=production
    - NEXT_PUBLIC_API_URL=https://yourdomain.com/api
    - NEXT_PUBLIC_PYTHON_API_URL=https://yourdomain.com/faceapi
  volumes:
    - ./certs:/certs  # ماونت پوشه گواهی‌نامه‌ها
  restart: unless-stopped
  depends_on:
    - nestjs
  networks:
    - app-network
  command: >
    sh -c "node server.js"  # یا هر دستور مناسب دیگری که سرور را با SSL راه‌اندازی می‌کند

# سرویس nestjs را به صورت زیر ویرایش کنید
nestjs:
  build:
    context: ./nest
    dockerfile: Dockerfile
  # تغییر پورت به داخلی (فقط در شبکه داخلی داکر)
  ports:
    - "3001:3001"
  environment:
    - NODE_ENV=production
    - DATABASE_URL=mysql://root:rootpassword@mysql:3306/mydatabase?connect_timeout=30
    - REDIS_HOST=redis
    - REDIS_PORT=6379
    - SSL_KEY_PATH=/certs/privkey.pem
    - SSL_CERT_PATH=/certs/fullchain.pem
  volumes:
    - ./certs:/certs  # ماونت پوشه گواهی‌نامه‌ها
```

## مرحله ۶: نصب و پیکربندی Nginx برای Reverse Proxy (توصیه شده)
```bash
# اضافه کردن سرویس Nginx به docker-compose.yml
cat >> docker-compose.yml << 'EOL'

  # سرویس Nginx برای Reverse Proxy و SSL
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./certs:/etc/nginx/certs
    depends_on:
      - nextjs
      - nestjs
      - pythonserver
    networks:
      - app-network
    restart: unless-stopped
EOL

# ایجاد پوشه برای پیکربندی Nginx
mkdir -p nginx/conf.d

# ایجاد فایل پیکربندی اصلی Nginx
cat > nginx/nginx.conf << 'EOL'
user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;
    server_tokens off;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml application/javascript;
    gzip_disable "MSIE [1-6]\.";

    # SSL settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    include /etc/nginx/conf.d/*.conf;
}
EOL

# ایجاد فایل پیکربندی وب‌سایت
cat > nginx/conf.d/default.conf << 'EOL'
server {
    listen 80;
    server_name yourdomain.com www.yourdomain.com;
    
    # ریدایرکت تمام درخواست‌های HTTP به HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name yourdomain.com www.yourdomain.com;
    
    # تنظیمات SSL
    ssl_certificate /etc/nginx/certs/fullchain.pem;
    ssl_certificate_key /etc/nginx/certs/privkey.pem;
    
    # تنظیمات امنیتی
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-XSS-Protection "1; mode=block";
    
    # فرانت‌اند (Next.js)
    location / {
        proxy_pass http://nextjs:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # بک‌اند (Nest.js)
    location /api {
        rewrite ^/api/(.*) /$1 break;
        proxy_pass http://nestjs:3001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # سرویس تشخیص چهره (Python)
    location /faceapi {
        rewrite ^/faceapi/(.*) /$1 break;
        proxy_pass http://pythonserver:5000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # phpMyAdmin
    location /phpmyadmin {
        proxy_pass http://phpmyadmin:80;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Redis Commander
    location /redis {
        proxy_pass http://redis-commander:8081;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # تنظیم محدودیت اندازه آپلود
    client_max_body_size 20M;
}
EOL

# جایگزینی yourdomain.com با دامنه واقعی در فایل‌های پیکربندی
sed -i 's/yourdomain.com/your-actual-domain.com/g' nginx/conf.d/default.conf
```

## مرحله ۷: تنظیم فایل‌های محیطی
```bash
# ایجاد فایل .env برای Nest.js
mkdir -p nest
cat > nest/.env << EOL
DATABASE_URL="mysql://root:rootpassword@mysql:3306/mydatabase"
NODE_ENV=production
EOL

# ایجاد فایل .env.local برای Next.js
mkdir -p next
cat > next/.env.local << EOL
NEXT_PUBLIC_API_URL=https://your-actual-domain.com/api
NEXT_PUBLIC_PYTHON_API_URL=https://your-actual-domain.com/faceapi
NODE_ENV=production
EOL

# جایگزینی دامنه واقعی
sed -i 's/your-actual-domain.com/your-actual-domain.com/g' next/.env.local
```

## مرحله ۸: ایجاد و راه‌اندازی کانتینرها
```bash
# ساخت و راه‌اندازی کانتینرها
docker-compose build --no-cache
docker-compose up -d

# بررسی وضعیت کانتینرها
docker-compose ps
```

## مرحله ۹: اجرای مایگریشن‌های Prisma و ایجاد داده‌های اولیه
```bash
# دسترسی به کانتینر nestjs
docker-compose exec nestjs sh

# اجرای مایگریشن‌ها (در داخل کانتینر)
npx prisma migrate deploy

# خروج از کانتینر
exit

# ایجاد داده‌های اولیه
docker-compose exec mysql mysql -u root -prootpassword mydatabase -e "
INSERT INTO Role (id, name, permissions) 
VALUES 
(1, 'Admin', '{\"viewPlaces\":true,\"editPlaces\":true,\"deletePlaces\":true,\"viewPersons\":true,\"editPersons\":true,\"deletePersons\":true,\"viewRoles\":true,\"editRoles\":true,\"deleteRoles\":true}');

INSERT INTO User (fullName, nationalCode, phoneNumber, password, roleId) 
VALUES 
('amirali hashemipoor', '3381608681', '09369890707', '\$2b\$12\$F.VzTzQhGZ6uXod2oeNUuewqVFL/XiOD/8v47GtTHRleh5CN0ORrO', 1);
"
```

## مرحله ۱۰: تنظیم فایروال و پورت‌های مورد نیاز
```bash
# باز کردن پورت‌های مورد نیاز در فایروال
sudo ufw allow 22/tcp      # SSH
sudo ufw allow 80/tcp      # HTTP
sudo ufw allow 443/tcp     # HTTPS

# بررسی وضعیت فایروال
sudo ufw status
```

## مرحله ۱۱: تست و اطمینان از صحت نصب
```bash
# بررسی لاگ‌ها برای اطمینان از راه‌اندازی موفق
docker-compose logs -f

# تست اتصال به وب‌سایت
curl -k https://your-actual-domain.com
```

## نکات تکمیلی

### تنظیم خودکار تمدید گواهی‌نامه SSL
```bash
# ایجاد یک اسکریپت برای تمدید خودکار
cat > renew-ssl.sh << 'EOL'
#!/bin/bash

# توقف موقت Nginx
docker-compose stop nginx

# تمدید گواهی
certbot renew --quiet

# کپی گواهی‌نامه‌های جدید
cp /etc/letsencrypt/live/your-actual-domain.com/fullchain.pem certs/
cp /etc/letsencrypt/live/your-actual-domain.com/privkey.pem certs/
chmod 644 certs/*.pem

# راه‌اندازی مجدد Nginx
docker-compose start nginx
EOL

# قابل اجرا کردن اسکریپت
chmod +x renew-ssl.sh

# اضافه کردن اسکریپت به کرونتب
echo "0 3 1 * * /path/to/your/project/renew-ssl.sh" | crontab -
```

### عیب‌یابی متداول

#### مشکل در اتصال به دیتابیس
```bash
# بررسی وضعیت سرویس MySQL
docker-compose ps mysql
docker-compose logs mysql

# اصلاح مشکل با ریست کردن دیتابیس
docker-compose restart mysql
```

#### مشکل در گواهینامه‌های SSL
```bash
# بررسی مسیر و دسترسی‌های فایل‌های SSL
ls -la certs/

# تغییر نام فایل‌های گواهی‌نامه در صورت نیاز
docker-compose exec nginx sh -c "ls -la /etc/nginx/certs"

# اگر نام فایل‌ها متفاوت است، آنها را تغییر دهید
mv certs/fullchain1.pem certs/fullchain.pem
mv certs/privkey1.pem certs/privkey.pem
```

#### مشکل در دسترسی به سرویس‌ها
```bash
# بررسی لاگ‌های Nginx
docker-compose logs nginx

# بررسی پیکربندی Nginx
docker-compose exec nginx nginx -t

# راه‌اندازی مجدد Nginx
docker-compose restart nginx
```

### مدیریت سیستم
```bash
# راه‌اندازی تمام سرویس‌ها
docker-compose up -d

# توقف تمام سرویس‌ها
docker-compose down

# راه‌اندازی مجدد یک سرویس خاص
docker-compose restart servicename

# مشاهده لاگ‌های سرویس‌ها
docker-compose logs -f
docker-compose logs -f servicename

# به‌روزرسانی پروژه
git pull
docker-compose build --no-cache
docker-compose up -d

# پاکسازی فضای دیسک
docker system prune -a --volumes
```

### دسترسی به سرویس‌ها
- **وب‌سایت اصلی**: https://your-actual-domain.com
- **API (Nest.js)**: https://your-actual-domain.com/api
- **API تشخیص چهره**: https://your-actual-domain.com/faceapi
- **phpMyAdmin**: https://your-actual-domain.com/phpmyadmin
- **Redis Commander**: https://your-actual-domain.com/redis

### دستورات پرکاربرد
```bash
# بررسی وضعیت Docker
docker ps
docker stats

# اجرای دستور در کانتینر
docker-compose exec nestjs sh
docker-compose exec mysql mysql -u root -prootpassword mydatabase

# کپی فایل به/از کانتینر
docker cp myfile.txt container_id:/path/in/container
docker cp container_id:/path/in/container/myfile.txt ./

# بررسی لاگ‌های سیستم
journalctl -u docker.service